
Pandoc Test Suite
================================================================================

### Command-Line Tool

This test suite requires pandoc 1.16:

    >>> from subprocess import Popen, PIPE
    >>> p = Popen(["pandoc", "-v"], stdout=PIPE)
    >>> if "pandoc 1.16" not in p.communicate()[0]:
    ...     raise RuntimeError("pandoc 1.16 not found")

### Imports

    >>> from pandoc.types import *
    >>> import pandoc

### Helper functions

    >>> from subprocess import Popen, PIPE
    >>> import json
    >>> def to_json(txt):
    ...     p = Popen(["pandoc", "-tjson"], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    ...     json_string = p.communicate(input=txt.encode("utf-8"))[0]
    ...     json_doc = json.loads(json_string)
    ...     return json_doc

    >>> def linebreak(text, length=80):
    ...     chunks = [text[i:i+length] for i in range(0, len(text), length)]
    ...     return "\n".join(chunks)

    >>> doc = None
    >>> json_ref = None
    >>> json_res = None
    >>> def test(txt):
    ...     global doc, json_ref, json_res
    ...     json_ref = to_json(txt)
    ...     doc = pandoc.read(json_ref)
    ...     print linebreak(repr(doc), length=80-4)
    ...     json_res = pandoc.write(doc)
    ...     if json_ref != json_res:
    ...         error = """\
    ... pandoc read-write roundtrip failed. 
    ...
    ... The reference:
    ...
    ... {0}
    ...
    ... and the actual result:
    ...
    ... {1}
    ...
    ... are different.
    ... """
    ...         raise ValueError(error.format(json_ref, json_res))

    >>> def wrap_blocks(*json_blocks):
    ...     return [{"unMeta":{}}, list(json_blocks)]
    >>> def wrap_inlines(*json_inlines):
    ...     return wrap_blocks({"t":"Para", "c":list(json_inlines)})


Basic Tests
--------------------------------------------------------------------------------

Empty document:

    >>> test(u"")
    Pandoc(Meta(map()), [])

Hello world:
 
    >>> test(u"Hello World!")
    Pandoc(Meta(map()), [Para([Str(u'Hello'), Space(), Str(u'World!')])])

Standard Metadata:
    >>> test(
    ... """\
    ... % title
    ... % author
    ... % date
    ... """
    ... )
    Pandoc(Meta(map([(u'date', MetaInlines([Str(u'date')])), (u'title', MetaInli
    nes([Str(u'title')])), (u'author', MetaList([MetaInlines([Str(u'author')])])
    )])), [])


Inlines
--------------------------------------------------------------------------------

### Emphasis

    >>> test("""This text is _emphasized with underscores_, and this
    ... is *emphasized with asterisks*.""")
    Pandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'text'), Space(), Str
    (u'is'), Space(), Emph([Str(u'emphasized'), Space(), Str(u'with'), Space(), 
    Str(u'underscores')]), Str(u','), Space(), Str(u'and'), Space(), Str(u'this'
    ), SoftBreak(), Str(u'is'), Space(), Emph([Str(u'emphasized'), Space(), Str(
    u'with'), Space(), Str(u'asterisks')]), Str(u'.')])])

    >>> test("This is **strong emphasis** and __with underscores__.")
    Pandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Stron
    g([Str(u'strong'), Space(), Str(u'emphasis')]), Space(), Str(u'and'), Space(
    ), Strong([Str(u'with'), Space(), Str(u'underscores')]), Str(u'.')])])

    >>> test("This is * not emphasized *, and \*neither is this\*.")
    Pandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Str(u
    '*'), Space(), Str(u'not'), Space(), Str(u'emphasized'), Space(), Str(u'*,')
    , Space(), Str(u'and'), Space(), Str(u'*neither'), Space(), Str(u'is'), Spac
    e(), Str(u'this*.')])])


### Verbatim

    >>> test("What is the difference between `>>=` and `>>`?")
    Pandoc(Meta(map()), [Para([Str(u'What'), Space(), Str(u'is'), Space(), Str(u
    'the'), Space(), Str(u'difference'), Space(), Str(u'between'), Space(), Code
    ((u'', [], []), u'>>='), Space(), Str(u'and'), Space(), Code((u'', [], []), 
    u'>>'), Str(u'?')])])

    >>> test("Here is a literal backtick `` ` ``.")
    Pandoc(Meta(map()), [Para([Str(u'Here'), Space(), Str(u'is'), Space(), Str(u
    'a'), Space(), Str(u'literal'), Space(), Str(u'backtick'), Space(), Code((u'
    ', [], []), u'`'), Str(u'.')])])

    >>> test("This is a backslash followed by an asterisk: `\*`.")
    Pandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Str(u
    'a'), Space(), Str(u'backslash'), Space(), Str(u'followed'), Space(), Str(u'
    by'), Space(), Str(u'an'), Space(), Str(u'asterisk:'), Space(), Code((u'', [
    ], []), u'\\*'), Str(u'.')])])



Blocks 
--------------------------------------------------------------------------------



